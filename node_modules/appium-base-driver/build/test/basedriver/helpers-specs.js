"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _helpers = require("../../lib/basedriver/helpers");

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

_chai.default.use(_chaiAsPromised.default);

const should = _chai.default.should();

describe('helpers', function () {
  describe('#isPackageOrBundle', function () {
    it('should accept packages and bundles', function () {
      (0, _helpers.isPackageOrBundle)('io.appium.testapp').should.be.true;
    });
    it('should not accept non-packages or non-bundles', function () {
      (0, _helpers.isPackageOrBundle)('foo').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.app').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.apk').should.be.false;
    });
  });
  describe('#renameKey', function () {
    it('should translate key in an object', function () {
      (0, _helpers.renameKey)({
        'foo': 'hello world'
      }, 'foo', 'bar').should.eql({
        'bar': 'hello world'
      });
    });
    it('should translate key in an object within an object', function () {
      (0, _helpers.renameKey)({
        'key': {
          'foo': 'hello world'
        }
      }, 'foo', 'bar').should.eql({
        'key': {
          'bar': 'hello world'
        }
      });
    });
    it('should translate key in an object with an array', function () {
      (0, _helpers.renameKey)([{
        'key': {
          'foo': 'hello world'
        }
      }, {
        'foo': 'HELLO WORLD'
      }], 'foo', 'bar').should.eql([{
        'key': {
          'bar': 'hello world'
        }
      }, {
        'bar': 'HELLO WORLD'
      }]);
    });
    it('should not do anything to primitives', function () {
      [0, 1, -1, true, false, null, undefined, "", "Hello World"].forEach(item => {
        should.equal((0, _helpers.renameKey)(item), item);
      });
    });
    it('should rename keys on big complex objects', function () {
      const input = [{
        'foo': 'bar'
      }, {
        hello: {
          world: {
            'foo': 'BAR'
          }
        },
        foo: 'bahr'
      }, 'foo', null, 0];
      const expectedOutput = [{
        'FOO': 'bar'
      }, {
        hello: {
          world: {
            'FOO': 'BAR'
          }
        },
        FOO: 'bahr'
      }, 'foo', null, 0];
      (0, _helpers.renameKey)(input, 'foo', 'FOO').should.deep.equal(expectedOutput);
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9oZWxwZXJzLXNwZWNzLmpzIl0sIm5hbWVzIjpbImNoYWkiLCJ1c2UiLCJjaGFpQXNQcm9taXNlZCIsInNob3VsZCIsImRlc2NyaWJlIiwiaXQiLCJiZSIsInRydWUiLCJmYWxzZSIsImVxbCIsInVuZGVmaW5lZCIsImZvckVhY2giLCJpdGVtIiwiZXF1YWwiLCJpbnB1dCIsImhlbGxvIiwid29ybGQiLCJmb28iLCJleHBlY3RlZE91dHB1dCIsIkZPTyIsImRlZXAiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBQSxjQUFLQyxHQUFMLENBQVNDLHVCQUFUOztBQUNBLE1BQU1DLE1BQU0sR0FBR0gsY0FBS0csTUFBTCxFQUFmOztBQUVBQyxRQUFRLENBQUMsU0FBRCxFQUFZLFlBQVk7QUFDOUJBLEVBQUFBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixZQUFZO0FBQ3pDQyxJQUFBQSxFQUFFLENBQUMsb0NBQUQsRUFBdUMsWUFBWTtBQUNuRCxzQ0FBa0IsbUJBQWxCLEVBQXVDRixNQUF2QyxDQUE4Q0csRUFBOUMsQ0FBaURDLElBQWpEO0FBQ0QsS0FGQyxDQUFGO0FBR0FGLElBQUFBLEVBQUUsQ0FBQywrQ0FBRCxFQUFrRCxZQUFZO0FBQzlELHNDQUFrQixLQUFsQixFQUF5QkYsTUFBekIsQ0FBZ0NHLEVBQWhDLENBQW1DRSxLQUFuQztBQUNBLHNDQUFrQixpQkFBbEIsRUFBcUNMLE1BQXJDLENBQTRDRyxFQUE1QyxDQUErQ0UsS0FBL0M7QUFDQSxzQ0FBa0IsaUJBQWxCLEVBQXFDTCxNQUFyQyxDQUE0Q0csRUFBNUMsQ0FBK0NFLEtBQS9DO0FBQ0QsS0FKQyxDQUFGO0FBS0QsR0FUTyxDQUFSO0FBV0FKLEVBQUFBLFFBQVEsQ0FBQyxZQUFELEVBQWUsWUFBWTtBQUNqQ0MsSUFBQUEsRUFBRSxDQUFDLG1DQUFELEVBQXNDLFlBQVk7QUFDbEQsOEJBQVU7QUFBQyxlQUFPO0FBQVIsT0FBVixFQUFrQyxLQUFsQyxFQUF5QyxLQUF6QyxFQUFnREYsTUFBaEQsQ0FBdURNLEdBQXZELENBQTJEO0FBQUMsZUFBTztBQUFSLE9BQTNEO0FBQ0QsS0FGQyxDQUFGO0FBR0FKLElBQUFBLEVBQUUsQ0FBQyxvREFBRCxFQUF1RCxZQUFZO0FBQ25FLDhCQUFVO0FBQUMsZUFBTztBQUFDLGlCQUFPO0FBQVI7QUFBUixPQUFWLEVBQTJDLEtBQTNDLEVBQWtELEtBQWxELEVBQXlERixNQUF6RCxDQUFnRU0sR0FBaEUsQ0FBb0U7QUFBQyxlQUFPO0FBQUMsaUJBQU87QUFBUjtBQUFSLE9BQXBFO0FBQ0QsS0FGQyxDQUFGO0FBR0FKLElBQUFBLEVBQUUsQ0FBQyxpREFBRCxFQUFvRCxZQUFZO0FBQ2hFLDhCQUFVLENBQ1I7QUFBQyxlQUFPO0FBQUMsaUJBQU87QUFBUjtBQUFSLE9BRFEsRUFFUjtBQUFDLGVBQU87QUFBUixPQUZRLENBQVYsRUFHRyxLQUhILEVBR1UsS0FIVixFQUdpQkYsTUFIakIsQ0FHd0JNLEdBSHhCLENBRzRCLENBQzFCO0FBQUMsZUFBTztBQUFDLGlCQUFPO0FBQVI7QUFBUixPQUQwQixFQUUxQjtBQUFDLGVBQU87QUFBUixPQUYwQixDQUg1QjtBQU9ELEtBUkMsQ0FBRjtBQVNBSixJQUFBQSxFQUFFLENBQUMsc0NBQUQsRUFBeUMsWUFBWTtBQUNyRCxPQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBQyxDQUFSLEVBQVcsSUFBWCxFQUFpQixLQUFqQixFQUF3QixJQUF4QixFQUE4QkssU0FBOUIsRUFBeUMsRUFBekMsRUFBNkMsYUFBN0MsRUFBNERDLE9BQTVELENBQXFFQyxJQUFELElBQVU7QUFDNUVULFFBQUFBLE1BQU0sQ0FBQ1UsS0FBUCxDQUFhLHdCQUFVRCxJQUFWLENBQWIsRUFBOEJBLElBQTlCO0FBQ0QsT0FGRDtBQUdELEtBSkMsQ0FBRjtBQUtBUCxJQUFBQSxFQUFFLENBQUMsMkNBQUQsRUFBOEMsWUFBWTtBQUMxRCxZQUFNUyxLQUFLLEdBQUcsQ0FDWjtBQUFDLGVBQU87QUFBUixPQURZLEVBRVo7QUFDRUMsUUFBQUEsS0FBSyxFQUFFO0FBQ0xDLFVBQUFBLEtBQUssRUFBRTtBQUNMLG1CQUFPO0FBREY7QUFERixTQURUO0FBTUVDLFFBQUFBLEdBQUcsRUFBRTtBQU5QLE9BRlksRUFVWixLQVZZLEVBV1osSUFYWSxFQVlaLENBWlksQ0FBZDtBQWNBLFlBQU1DLGNBQWMsR0FBRyxDQUNyQjtBQUFDLGVBQU87QUFBUixPQURxQixFQUVyQjtBQUNFSCxRQUFBQSxLQUFLLEVBQUU7QUFDTEMsVUFBQUEsS0FBSyxFQUFFO0FBQ0wsbUJBQU87QUFERjtBQURGLFNBRFQ7QUFNRUcsUUFBQUEsR0FBRyxFQUFFO0FBTlAsT0FGcUIsRUFVckIsS0FWcUIsRUFXckIsSUFYcUIsRUFZckIsQ0FacUIsQ0FBdkI7QUFjQSw4QkFBVUwsS0FBVixFQUFpQixLQUFqQixFQUF3QixLQUF4QixFQUErQlgsTUFBL0IsQ0FBc0NpQixJQUF0QyxDQUEyQ1AsS0FBM0MsQ0FBaURLLGNBQWpEO0FBQ0QsS0E5QkMsQ0FBRjtBQStCRCxHQXBETyxDQUFSO0FBcURELENBakVPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BhY2thZ2VPckJ1bmRsZSwgcmVuYW1lS2V5IH0gZnJvbSAnLi4vLi4vbGliL2Jhc2Vkcml2ZXIvaGVscGVycyc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcblxuXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5jb25zdCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuXG5kZXNjcmliZSgnaGVscGVycycsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoJyNpc1BhY2thZ2VPckJ1bmRsZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGFjY2VwdCBwYWNrYWdlcyBhbmQgYnVuZGxlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzUGFja2FnZU9yQnVuZGxlKCdpby5hcHBpdW0udGVzdGFwcCcpLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGFjY2VwdCBub24tcGFja2FnZXMgb3Igbm9uLWJ1bmRsZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpc1BhY2thZ2VPckJ1bmRsZSgnZm9vJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgaXNQYWNrYWdlT3JCdW5kbGUoJy9wYXRoL3RvL2FuLmFwcCcpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIGlzUGFja2FnZU9yQnVuZGxlKCcvcGF0aC90by9hbi5hcGsnKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCcjcmVuYW1lS2V5JywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgdHJhbnNsYXRlIGtleSBpbiBhbiBvYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZW5hbWVLZXkoeydmb28nOiAnaGVsbG8gd29ybGQnfSwgJ2ZvbycsICdiYXInKS5zaG91bGQuZXFsKHsnYmFyJzogJ2hlbGxvIHdvcmxkJ30pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdHJhbnNsYXRlIGtleSBpbiBhbiBvYmplY3Qgd2l0aGluIGFuIG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbmFtZUtleSh7J2tleSc6IHsnZm9vJzogJ2hlbGxvIHdvcmxkJ319LCAnZm9vJywgJ2JhcicpLnNob3VsZC5lcWwoeydrZXknOiB7J2Jhcic6ICdoZWxsbyB3b3JsZCd9fSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0cmFuc2xhdGUga2V5IGluIGFuIG9iamVjdCB3aXRoIGFuIGFycmF5JywgZnVuY3Rpb24gKCkge1xuICAgICAgcmVuYW1lS2V5KFtcbiAgICAgICAgeydrZXknOiB7J2Zvbyc6ICdoZWxsbyB3b3JsZCd9fSxcbiAgICAgICAgeydmb28nOiAnSEVMTE8gV09STEQnfVxuICAgICAgXSwgJ2ZvbycsICdiYXInKS5zaG91bGQuZXFsKFtcbiAgICAgICAgeydrZXknOiB7J2Jhcic6ICdoZWxsbyB3b3JsZCd9fSxcbiAgICAgICAgeydiYXInOiAnSEVMTE8gV09STEQnfVxuICAgICAgXSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgZG8gYW55dGhpbmcgdG8gcHJpbWl0aXZlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFswLCAxLCAtMSwgdHJ1ZSwgZmFsc2UsIG51bGwsIHVuZGVmaW5lZCwgXCJcIiwgXCJIZWxsbyBXb3JsZFwiXS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHNob3VsZC5lcXVhbChyZW5hbWVLZXkoaXRlbSksIGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZW5hbWUga2V5cyBvbiBiaWcgY29tcGxleCBvYmplY3RzJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgaW5wdXQgPSBbXG4gICAgICAgIHsnZm9vJzogJ2Jhcid9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVsbG86IHtcbiAgICAgICAgICAgIHdvcmxkOiB7XG4gICAgICAgICAgICAgICdmb28nOiAnQkFSJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZvbzogJ2JhaHInXG4gICAgICAgIH0sXG4gICAgICAgICdmb28nLFxuICAgICAgICBudWxsLFxuICAgICAgICAwXG4gICAgICBdO1xuICAgICAgY29uc3QgZXhwZWN0ZWRPdXRwdXQgPSBbXG4gICAgICAgIHsnRk9PJzogJ2Jhcid9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVsbG86IHtcbiAgICAgICAgICAgIHdvcmxkOiB7XG4gICAgICAgICAgICAgICdGT08nOiAnQkFSJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIEZPTzogJ2JhaHInXG4gICAgICAgIH0sXG4gICAgICAgICdmb28nLFxuICAgICAgICBudWxsLFxuICAgICAgICAwXG4gICAgICBdO1xuICAgICAgcmVuYW1lS2V5KGlucHV0LCAnZm9vJywgJ0ZPTycpLnNob3VsZC5kZWVwLmVxdWFsKGV4cGVjdGVkT3V0cHV0KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJmaWxlIjoidGVzdC9iYXNlZHJpdmVyL2hlbHBlcnMtc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
