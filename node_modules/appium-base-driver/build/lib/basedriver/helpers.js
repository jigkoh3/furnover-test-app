"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureApp = configureApp;
exports.isPackageOrBundle = isPackageOrBundle;
exports.getCoordDefault = getCoordDefault;
exports.getSwipeTouchDuration = getSwipeTouchDuration;
exports.renameKey = renameKey;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _logger = _interopRequireDefault(require("./logger"));

var _fs2 = _interopRequireDefault(require("fs"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _request = _interopRequireDefault(require("request"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));

const ZIP_EXTS = ['.zip', '.ipa'];
const ZIP_MIME_TYPES = ['application/zip', 'application/x-zip-compressed', 'multipart/x-zip'];
const APPLICATIONS_CACHE = new _lruCache.default({
  max: 100
});
const APPLICATIONS_CACHE_GUARD = new _asyncLock.default();
const SANITIZE_REPLACEMENT = '-';

async function retrieveHeaders(link) {
  try {
    const response = await (0, _requestPromise.default)({
      url: link,
      method: 'HEAD',
      resolveWithFullResponse: true,
      timeout: 5000
    });
    return response.headers;
  } catch (e) {
    _logger.default.debug(`Cannot send HEAD request to '${link}'. Original error: ${e.message}`);
  }

  return {};
}

function getCachedApplicationPath(link, currentModified) {
  if (!APPLICATIONS_CACHE.has(link) || !currentModified) {
    return null;
  }

  const {
    lastModified,
    fullPath
  } = APPLICATIONS_CACHE.get(link);

  if (lastModified && currentModified.getTime() <= lastModified.getTime()) {
    _logger.default.debug(`Reusing already downloaded application at '${fullPath}'`);

    return fullPath;
  }

  _logger.default.debug(`'Last-Modified' timestamp of '${link}' has been updated. ` + `An updated copy of the application is going to be downloaded.`);

  return null;
}

function verifyAppExtension(app, supportedAppExtensions) {
  if (supportedAppExtensions.includes(_path.default.extname(app))) {
    return app;
  }

  throw new Error(`New app path '${app}' did not have extension(s) '${supportedAppExtensions}'`);
}

async function configureApp(app, supportedAppExtensions) {
  if (!_lodash.default.isString(app)) {
    return;
  }

  if (!_lodash.default.isArray(supportedAppExtensions)) {
    supportedAppExtensions = [supportedAppExtensions];
  }

  let newApp = app;
  let shouldUnzipApp = false;
  let archiveHash = null;
  let currentModified = null;

  const {
    protocol
  } = _url.default.parse(newApp);

  const isUrl = ['http:', 'https:'].includes(protocol);
  return await APPLICATIONS_CACHE_GUARD.acquire(app, async () => {
    if (isUrl) {
      _logger.default.info(`Using downloadable app '${newApp}'`);

      const headers = await retrieveHeaders(newApp);

      if (headers['last-modified']) {
        _logger.default.debug(`Last-Modified: ${headers['last-modified']}`);

        currentModified = new Date(headers['last-modified']);
      }

      const cachedPath = getCachedApplicationPath(app, currentModified);

      if (cachedPath) {
        if (await _appiumSupport.fs.exists(cachedPath)) {
          _logger.default.info(`Reusing the previously downloaded application at '${cachedPath}'`);

          return verifyAppExtension(cachedPath, supportedAppExtensions);
        }

        _logger.default.info(`The application at '${cachedPath}' does not exist anymore. Deleting it from the cache`);

        APPLICATIONS_CACHE.del(app);
      }

      let fileName = null;

      if (ZIP_EXTS.includes(_path.default.extname(newApp))) {
        fileName = (0, _sanitizeFilename.default)(_path.default.basename(newApp), {
          replacement: SANITIZE_REPLACEMENT
        });
        shouldUnzipApp = true;
      }

      if (headers['content-type']) {
        _logger.default.debug(`Content-Type: ${headers['content-type']}`);

        if (ZIP_MIME_TYPES.includes(headers['content-type'])) {
          if (!fileName) {
            fileName = 'appium-app.zip';
          }

          shouldUnzipApp = true;
        }
      }

      if (headers['content-disposition'] && /^attachment/i.test(headers['content-disposition'])) {
        const match = /filename="([^"]+)/i.exec(headers['content-disposition']);

        if (match) {
          _logger.default.debug(`Parsed file name '${match[1]}' from 'Content-Disposition' header`);

          fileName = (0, _sanitizeFilename.default)(match[1], {
            replacement: SANITIZE_REPLACEMENT
          });
          shouldUnzipApp = shouldUnzipApp || ZIP_EXTS.includes(_path.default.extname(fileName));
        }
      }

      if (!fileName) {
        fileName = `appium-app${_lodash.default.first(supportedAppExtensions)}`;
      }

      const targetPath = await _appiumSupport.tempDir.path({
        prefix: fileName,
        suffix: ''
      });
      newApp = await downloadApp(newApp, targetPath);
    } else if (await _appiumSupport.fs.exists(newApp)) {
      _logger.default.info(`Using local app '${newApp}'`);

      shouldUnzipApp = ZIP_EXTS.includes(_path.default.extname(newApp));
    } else {
      let errorMessage = `The application at '${newApp}' does not exist or is not accessible`;

      if (_lodash.default.isString(protocol) && protocol.length > 2) {
        errorMessage = `The protocol '${protocol}' used in '${newApp}' is not supported. ` + `Only http: and https: protocols are supported`;
      }

      throw new Error(errorMessage);
    }

    if (shouldUnzipApp) {
      const archivePath = newApp;
      archiveHash = await _appiumSupport.fs.hash(archivePath);

      if (APPLICATIONS_CACHE.has(app) && archiveHash === APPLICATIONS_CACHE.get(app).hash) {
        const {
          fullPath
        } = APPLICATIONS_CACHE.get(app);

        if (await _appiumSupport.fs.exists(fullPath)) {
          if (archivePath !== app) {
            await _appiumSupport.fs.rimraf(archivePath);
          }

          _logger.default.info(`Will reuse previously cached application at '${fullPath}'`);

          return verifyAppExtension(fullPath, supportedAppExtensions);
        }

        _logger.default.info(`The application at '${fullPath}' does not exist anymore. Deleting it from the cache`);

        APPLICATIONS_CACHE.del(app);
      }

      const tmpRoot = await _appiumSupport.tempDir.openDir();

      try {
        newApp = await unzipApp(archivePath, tmpRoot, supportedAppExtensions);
      } finally {
        if (newApp !== archivePath && archivePath !== app) {
          await _appiumSupport.fs.rimraf(archivePath);
        }
      }

      _logger.default.info(`Unzipped local app to '${newApp}'`);
    } else if (!_path.default.isAbsolute(newApp)) {
      newApp = _path.default.resolve(process.cwd(), newApp);

      _logger.default.warn(`The current application path '${app}' is relative, ` + `which might cause further issues. The path has been rewritten to '${newApp}' ` + `in order to avoid them`);
    }

    verifyAppExtension(newApp, supportedAppExtensions);

    if (app !== newApp && (archiveHash || currentModified)) {
      APPLICATIONS_CACHE.set(app, {
        hash: archiveHash,
        lastModified: currentModified,
        fullPath: newApp
      });
    }

    return newApp;
  });
}

async function downloadApp(app, targetPath) {
  let appUrl;

  try {
    appUrl = _url.default.parse(app);
  } catch (err) {
    throw new Error(`Invalid App URL (${app})`);
  }

  try {
    const started = process.hrtime();
    await new _bluebird.default((resolve, reject) => {
      (0, _request.default)(appUrl.href).on('error', reject).on('response', res => {
        if (res.statusCode >= 400) {
          return reject(`Error downloading file: ${res.statusCode}`);
        }
      }).pipe(_fs2.default.createWriteStream(targetPath)).on('close', resolve);
    });
    const [seconds, ns] = process.hrtime(started);
    const secondsElapsed = seconds + ns / 1E09;
    const {
      size
    } = await _appiumSupport.fs.stat(targetPath);

    _logger.default.debug(`'${appUrl.href}' (${_appiumSupport.util.toReadableSizeString(size)}) ` + `has been downloaded to '${targetPath}' in ${secondsElapsed.toFixed(3)}s`);

    if (secondsElapsed >= 2) {
      const bytesPerSec = Math.floor(size / secondsElapsed);

      _logger.default.debug(`Approximate download speed: ${_appiumSupport.util.toReadableSizeString(bytesPerSec)}/s`);
    }

    return targetPath;
  } catch (err) {
    throw new Error(`Problem downloading app from url ${appUrl.href}: ${err.message}`);
  }
}

async function walkDir(dir) {
  const result = [];

  for (const name of await _appiumSupport.fs.readdir(dir)) {
    const currentPath = _path.default.join(dir, name);

    result.push(currentPath);

    if ((await _appiumSupport.fs.stat(currentPath)).isDirectory()) {
      result.push(...(await walkDir(currentPath)));
    }
  }

  return result;
}

async function unzipApp(zipPath, dstRoot, supportedAppExtensions) {
  await _appiumSupport.zip.assertValidZip(zipPath);

  if (!_lodash.default.isArray(supportedAppExtensions)) {
    supportedAppExtensions = [supportedAppExtensions];
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    _logger.default.debug(`Unzipping '${zipPath}'`);

    await _appiumSupport.zip.extractAllTo(zipPath, tmpRoot);
    const allExtractedItems = await walkDir(tmpRoot);

    _logger.default.debug(`Extracted ${allExtractedItems.length} item(s) from '${zipPath}'`);

    const isSupportedAppItem = relativePath => supportedAppExtensions.includes(_path.default.extname(relativePath)) || _lodash.default.some(supportedAppExtensions, x => relativePath.includes(`${x}${_path.default.sep}`));

    const itemsToKeep = allExtractedItems.map(itemPath => _path.default.relative(tmpRoot, itemPath)).filter(relativePath => isSupportedAppItem(relativePath)).map(relativePath => _path.default.resolve(tmpRoot, relativePath));

    const itemsToRemove = _lodash.default.difference(allExtractedItems, itemsToKeep).filter(itemToRemovePath => !_lodash.default.some(itemsToKeep, itemToKeepPath => itemToKeepPath.startsWith(itemToRemovePath)));

    await _bluebird.default.all(itemsToRemove, async itemPath => {
      if (await _appiumSupport.fs.exists(itemPath)) {
        await _appiumSupport.fs.rimraf(itemPath);
      }
    });
    const allBundleItems = (await walkDir(tmpRoot)).map(itemPath => _path.default.relative(tmpRoot, itemPath)).filter(relativePath => isSupportedAppItem(relativePath)).sort((a, b) => a.split(_path.default.sep).length - b.split(_path.default.sep).length);

    if (_lodash.default.isEmpty(allBundleItems)) {
      throw new Error(`App zip unzipped OK, but we could not find ${supportedAppExtensions} bundle(s) ` + `in it. Make sure your archive contains ${supportedAppExtensions} package(s) ` + `and nothing else`);
    }

    const matchedBundle = _lodash.default.first(allBundleItems);

    _logger.default.debug(`Matched ${allBundleItems.length} item(s) in the extracted archive. ` + `Assuming '${matchedBundle}' is the correct bundle`);

    await _appiumSupport.fs.mv(_path.default.resolve(tmpRoot, matchedBundle), _path.default.resolve(dstRoot, matchedBundle), {
      mkdirp: true
    });
    return _path.default.resolve(dstRoot, matchedBundle);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
}

function isPackageOrBundle(app) {
  return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
}

function getCoordDefault(val) {
  return _appiumSupport.util.hasValue(val) ? val : 0.5;
}

function getSwipeTouchDuration(waitGesture) {
  let duration = 0.8;

  if (typeof waitGesture.options.ms !== 'undefined' && waitGesture.options.ms) {
    duration = waitGesture.options.ms / 1000;

    if (duration === 0) {
      duration = 0.1;
    }
  }

  return duration;
}

function renameKey(input, inKey, outKey) {
  if (_lodash.default.isArray(input)) {
    return input.map(item => renameKey(item, inKey, outKey));
  } else if (_lodash.default.isPlainObject(input)) {
    return _lodash.default.reduce(input, (resultObj, value, key) => (0, _objectSpread2.default)({}, resultObj, {
      [key === inKey ? outKey : key]: renameKey(value, inKey, outKey)
    }), {});
  }

  return input;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2hlbHBlcnMuanMiXSwibmFtZXMiOlsiWklQX0VYVFMiLCJaSVBfTUlNRV9UWVBFUyIsIkFQUExJQ0FUSU9OU19DQUNIRSIsIkxSVSIsIm1heCIsIkFQUExJQ0FUSU9OU19DQUNIRV9HVUFSRCIsIkFzeW5jTG9jayIsIlNBTklUSVpFX1JFUExBQ0VNRU5UIiwicmV0cmlldmVIZWFkZXJzIiwibGluayIsInJlc3BvbnNlIiwidXJsIiwibWV0aG9kIiwicmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2UiLCJ0aW1lb3V0IiwiaGVhZGVycyIsImUiLCJsb2dnZXIiLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJnZXRDYWNoZWRBcHBsaWNhdGlvblBhdGgiLCJjdXJyZW50TW9kaWZpZWQiLCJoYXMiLCJsYXN0TW9kaWZpZWQiLCJmdWxsUGF0aCIsImdldCIsImdldFRpbWUiLCJ2ZXJpZnlBcHBFeHRlbnNpb24iLCJhcHAiLCJzdXBwb3J0ZWRBcHBFeHRlbnNpb25zIiwiaW5jbHVkZXMiLCJwYXRoIiwiZXh0bmFtZSIsIkVycm9yIiwiY29uZmlndXJlQXBwIiwiXyIsImlzU3RyaW5nIiwiaXNBcnJheSIsIm5ld0FwcCIsInNob3VsZFVuemlwQXBwIiwiYXJjaGl2ZUhhc2giLCJwcm90b2NvbCIsInBhcnNlIiwiaXNVcmwiLCJhY3F1aXJlIiwiaW5mbyIsIkRhdGUiLCJjYWNoZWRQYXRoIiwiZnMiLCJleGlzdHMiLCJkZWwiLCJmaWxlTmFtZSIsImJhc2VuYW1lIiwicmVwbGFjZW1lbnQiLCJ0ZXN0IiwibWF0Y2giLCJleGVjIiwiZmlyc3QiLCJ0YXJnZXRQYXRoIiwidGVtcERpciIsInByZWZpeCIsInN1ZmZpeCIsImRvd25sb2FkQXBwIiwiZXJyb3JNZXNzYWdlIiwibGVuZ3RoIiwiYXJjaGl2ZVBhdGgiLCJoYXNoIiwicmltcmFmIiwidG1wUm9vdCIsIm9wZW5EaXIiLCJ1bnppcEFwcCIsImlzQWJzb2x1dGUiLCJyZXNvbHZlIiwicHJvY2VzcyIsImN3ZCIsIndhcm4iLCJzZXQiLCJhcHBVcmwiLCJlcnIiLCJzdGFydGVkIiwiaHJ0aW1lIiwiQiIsInJlamVjdCIsImhyZWYiLCJvbiIsInJlcyIsInN0YXR1c0NvZGUiLCJwaXBlIiwiX2ZzIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJzZWNvbmRzIiwibnMiLCJzZWNvbmRzRWxhcHNlZCIsInNpemUiLCJzdGF0IiwidXRpbCIsInRvUmVhZGFibGVTaXplU3RyaW5nIiwidG9GaXhlZCIsImJ5dGVzUGVyU2VjIiwiTWF0aCIsImZsb29yIiwid2Fsa0RpciIsImRpciIsInJlc3VsdCIsIm5hbWUiLCJyZWFkZGlyIiwiY3VycmVudFBhdGgiLCJqb2luIiwicHVzaCIsImlzRGlyZWN0b3J5IiwiemlwUGF0aCIsImRzdFJvb3QiLCJ6aXAiLCJhc3NlcnRWYWxpZFppcCIsImV4dHJhY3RBbGxUbyIsImFsbEV4dHJhY3RlZEl0ZW1zIiwiaXNTdXBwb3J0ZWRBcHBJdGVtIiwicmVsYXRpdmVQYXRoIiwic29tZSIsIngiLCJzZXAiLCJpdGVtc1RvS2VlcCIsIm1hcCIsIml0ZW1QYXRoIiwicmVsYXRpdmUiLCJmaWx0ZXIiLCJpdGVtc1RvUmVtb3ZlIiwiZGlmZmVyZW5jZSIsIml0ZW1Ub1JlbW92ZVBhdGgiLCJpdGVtVG9LZWVwUGF0aCIsInN0YXJ0c1dpdGgiLCJhbGwiLCJhbGxCdW5kbGVJdGVtcyIsInNvcnQiLCJhIiwiYiIsInNwbGl0IiwiaXNFbXB0eSIsIm1hdGNoZWRCdW5kbGUiLCJtdiIsIm1rZGlycCIsImlzUGFja2FnZU9yQnVuZGxlIiwiZ2V0Q29vcmREZWZhdWx0IiwidmFsIiwiaGFzVmFsdWUiLCJnZXRTd2lwZVRvdWNoRHVyYXRpb24iLCJ3YWl0R2VzdHVyZSIsImR1cmF0aW9uIiwib3B0aW9ucyIsIm1zIiwicmVuYW1lS2V5IiwiaW5wdXQiLCJpbktleSIsIm91dEtleSIsIml0ZW0iLCJpc1BsYWluT2JqZWN0IiwicmVkdWNlIiwicmVzdWx0T2JqIiwidmFsdWUiLCJrZXkiXSwibWFwcGluZ3MiOiI7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LHFCQUFULENBQWdDQyxXQUFoQyxFQUE2QztBQUczQyxNQUFJQyxRQUFRLEdBQUcsR0FBZjs7QUFDQSxNQUFJLE9BQU9ELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQkMsRUFBM0IsS0FBa0MsV0FBbEMsSUFBaURILFdBQVcsQ0FBQ0UsT0FBWixDQUFvQkMsRUFBekUsRUFBNkU7QUFDM0VGLElBQUFBLFFBQVEsR0FBR0QsV0FBVyxDQUFDRSxPQUFaLENBQW9CQyxFQUFwQixHQUF5QixJQUFwQzs7QUFDQSxRQUFJRixRQUFRLEtBQUssQ0FBakIsRUFBb0I7QUFHbEJBLE1BQUFBLFFBQVEsR0FBRyxHQUFYO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPQSxRQUFQO0FBQ0Q7O0FBUUQsU0FBU0csU0FBVCxDQUFvQkMsS0FBcEIsRUFBMkJDLEtBQTNCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUN4QyxNQUFJdEgsZ0JBQUVFLE9BQUYsQ0FBVWtILEtBQVYsQ0FBSixFQUFzQjtBQUNwQixXQUFPQSxLQUFLLENBQUM3QixHQUFOLENBQVdnQyxJQUFELElBQVVKLFNBQVMsQ0FBQ0ksSUFBRCxFQUFPRixLQUFQLEVBQWNDLE1BQWQsQ0FBN0IsQ0FBUDtBQUNELEdBRkQsTUFFTyxJQUFJdEgsZ0JBQUV3SCxhQUFGLENBQWdCSixLQUFoQixDQUFKLEVBQTRCO0FBQ2pDLFdBQU9wSCxnQkFBRXlILE1BQUYsQ0FBU0wsS0FBVCxFQUFnQixDQUFDTSxTQUFELEVBQVlDLEtBQVosRUFBbUJDLEdBQW5CLHFDQUNsQkYsU0FEa0I7QUFFckIsT0FBQ0UsR0FBRyxLQUFLUCxLQUFSLEdBQWdCQyxNQUFoQixHQUF5Qk0sR0FBMUIsR0FBZ0NULFNBQVMsQ0FBQ1EsS0FBRCxFQUFRTixLQUFSLEVBQWVDLE1BQWY7QUFGcEIsTUFBaEIsRUFHSCxFQUhHLENBQVA7QUFJRDs7QUFFRCxTQUFPRixLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfZnMgZnJvbSAnZnMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdGVtcERpciwgZnMsIHV0aWwsIHppcCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnO1xuaW1wb3J0IGFzeW5jUmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IEFzeW5jTG9jayBmcm9tICdhc3luYy1sb2NrJztcbmltcG9ydCBzYW5pdGl6ZSBmcm9tICdzYW5pdGl6ZS1maWxlbmFtZSc7XG5cbmNvbnN0IFpJUF9FWFRTID0gWycuemlwJywgJy5pcGEnXTtcbmNvbnN0IFpJUF9NSU1FX1RZUEVTID0gW1xuICAnYXBwbGljYXRpb24vemlwJyxcbiAgJ2FwcGxpY2F0aW9uL3gtemlwLWNvbXByZXNzZWQnLFxuICAnbXVsdGlwYXJ0L3gtemlwJyxcbl07XG5jb25zdCBBUFBMSUNBVElPTlNfQ0FDSEUgPSBuZXcgTFJVKHtcbiAgbWF4OiAxMDAsXG59KTtcbmNvbnN0IEFQUExJQ0FUSU9OU19DQUNIRV9HVUFSRCA9IG5ldyBBc3luY0xvY2soKTtcbmNvbnN0IFNBTklUSVpFX1JFUExBQ0VNRU5UID0gJy0nO1xuXG5hc3luYyBmdW5jdGlvbiByZXRyaWV2ZUhlYWRlcnMgKGxpbmspIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFzeW5jUmVxdWVzdCh7XG4gICAgICB1cmw6IGxpbmssXG4gICAgICBtZXRob2Q6ICdIRUFEJyxcbiAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlLFxuICAgICAgdGltZW91dDogNTAwMCxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2UuaGVhZGVycztcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgQ2Fubm90IHNlbmQgSEVBRCByZXF1ZXN0IHRvICcke2xpbmt9Jy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FjaGVkQXBwbGljYXRpb25QYXRoIChsaW5rLCBjdXJyZW50TW9kaWZpZWQpIHtcbiAgaWYgKCFBUFBMSUNBVElPTlNfQ0FDSEUuaGFzKGxpbmspIHx8ICFjdXJyZW50TW9kaWZpZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHtsYXN0TW9kaWZpZWQsIGZ1bGxQYXRofSA9IEFQUExJQ0FUSU9OU19DQUNIRS5nZXQobGluayk7XG4gIGlmIChsYXN0TW9kaWZpZWQgJiYgY3VycmVudE1vZGlmaWVkLmdldFRpbWUoKSA8PSBsYXN0TW9kaWZpZWQuZ2V0VGltZSgpKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBSZXVzaW5nIGFscmVhZHkgZG93bmxvYWRlZCBhcHBsaWNhdGlvbiBhdCAnJHtmdWxsUGF0aH0nYCk7XG4gICAgcmV0dXJuIGZ1bGxQYXRoO1xuICB9XG4gIGxvZ2dlci5kZWJ1ZyhgJ0xhc3QtTW9kaWZpZWQnIHRpbWVzdGFtcCBvZiAnJHtsaW5rfScgaGFzIGJlZW4gdXBkYXRlZC4gYCArXG4gICAgYEFuIHVwZGF0ZWQgY29weSBvZiB0aGUgYXBwbGljYXRpb24gaXMgZ29pbmcgdG8gYmUgZG93bmxvYWRlZC5gKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHZlcmlmeUFwcEV4dGVuc2lvbiAoYXBwLCBzdXBwb3J0ZWRBcHBFeHRlbnNpb25zKSB7XG4gIGlmIChzdXBwb3J0ZWRBcHBFeHRlbnNpb25zLmluY2x1ZGVzKHBhdGguZXh0bmFtZShhcHApKSkge1xuICAgIHJldHVybiBhcHA7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBOZXcgYXBwIHBhdGggJyR7YXBwfScgZGlkIG5vdCBoYXZlIGV4dGVuc2lvbihzKSAnJHtzdXBwb3J0ZWRBcHBFeHRlbnNpb25zfSdgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY29uZmlndXJlQXBwIChhcHAsIHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpIHtcbiAgaWYgKCFfLmlzU3RyaW5nKGFwcCkpIHtcbiAgICAvLyBpbW1lZGlhdGVseSBzaG9ydGNpcmN1aXQgaWYgbm90IGdpdmVuIGFuIGFwcFxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIV8uaXNBcnJheShzdXBwb3J0ZWRBcHBFeHRlbnNpb25zKSkge1xuICAgIHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMgPSBbc3VwcG9ydGVkQXBwRXh0ZW5zaW9uc107XG4gIH1cblxuICBsZXQgbmV3QXBwID0gYXBwO1xuICBsZXQgc2hvdWxkVW56aXBBcHAgPSBmYWxzZTtcbiAgbGV0IGFyY2hpdmVIYXNoID0gbnVsbDtcbiAgbGV0IGN1cnJlbnRNb2RpZmllZCA9IG51bGw7XG4gIGNvbnN0IHtwcm90b2NvbH0gPSB1cmwucGFyc2UobmV3QXBwKTtcbiAgY29uc3QgaXNVcmwgPSBbJ2h0dHA6JywgJ2h0dHBzOiddLmluY2x1ZGVzKHByb3RvY29sKTtcblxuICByZXR1cm4gYXdhaXQgQVBQTElDQVRJT05TX0NBQ0hFX0dVQVJELmFjcXVpcmUoYXBwLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzVXJsKSB7XG4gICAgICAvLyBVc2UgdGhlIGFwcCBmcm9tIHJlbW90ZSBVUkxcbiAgICAgIGxvZ2dlci5pbmZvKGBVc2luZyBkb3dubG9hZGFibGUgYXBwICcke25ld0FwcH0nYCk7XG4gICAgICBjb25zdCBoZWFkZXJzID0gYXdhaXQgcmV0cmlldmVIZWFkZXJzKG5ld0FwcCk7XG4gICAgICBpZiAoaGVhZGVyc1snbGFzdC1tb2RpZmllZCddKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgTGFzdC1Nb2RpZmllZDogJHtoZWFkZXJzWydsYXN0LW1vZGlmaWVkJ119YCk7XG4gICAgICAgIGN1cnJlbnRNb2RpZmllZCA9IG5ldyBEYXRlKGhlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXSk7XG4gICAgICB9XG4gICAgICBjb25zdCBjYWNoZWRQYXRoID0gZ2V0Q2FjaGVkQXBwbGljYXRpb25QYXRoKGFwcCwgY3VycmVudE1vZGlmaWVkKTtcbiAgICAgIGlmIChjYWNoZWRQYXRoKSB7XG4gICAgICAgIGlmIChhd2FpdCBmcy5leGlzdHMoY2FjaGVkUGF0aCkpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbyhgUmV1c2luZyB0aGUgcHJldmlvdXNseSBkb3dubG9hZGVkIGFwcGxpY2F0aW9uIGF0ICcke2NhY2hlZFBhdGh9J2ApO1xuICAgICAgICAgIHJldHVybiB2ZXJpZnlBcHBFeHRlbnNpb24oY2FjaGVkUGF0aCwgc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmluZm8oYFRoZSBhcHBsaWNhdGlvbiBhdCAnJHtjYWNoZWRQYXRofScgZG9lcyBub3QgZXhpc3QgYW55bW9yZS4gRGVsZXRpbmcgaXQgZnJvbSB0aGUgY2FjaGVgKTtcbiAgICAgICAgQVBQTElDQVRJT05TX0NBQ0hFLmRlbChhcHApO1xuICAgICAgfVxuXG4gICAgICBsZXQgZmlsZU5hbWUgPSBudWxsO1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gdW56aXAgdGhlIGFwcCwgd2UgaGF2ZSBhIG51bWJlciBvZiBwbGFjZXNcbiAgICAgIC8vIHRvIGxvb2s6IGNvbnRlbnQgdHlwZSwgY29udGVudCBkaXNwb3NpdGlvbiwgb3IgdGhlIGZpbGUgZXh0ZW5zaW9uXG4gICAgICBpZiAoWklQX0VYVFMuaW5jbHVkZXMocGF0aC5leHRuYW1lKG5ld0FwcCkpKSB7XG4gICAgICAgIGZpbGVOYW1lID0gc2FuaXRpemUocGF0aC5iYXNlbmFtZShuZXdBcHApLCB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQ6IFNBTklUSVpFX1JFUExBQ0VNRU5UXG4gICAgICAgIH0pO1xuICAgICAgICBzaG91bGRVbnppcEFwcCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaGVhZGVyc1snY29udGVudC10eXBlJ10pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBDb250ZW50LVR5cGU6ICR7aGVhZGVyc1snY29udGVudC10eXBlJ119YCk7XG4gICAgICAgIC8vIHRoZSBmaWxldHlwZSBtYXkgbm90IGJlIG9idmlvdXMgZm9yIGNlcnRhaW4gdXJscywgc28gY2hlY2sgdGhlIG1pbWUgdHlwZSB0b29cbiAgICAgICAgaWYgKFpJUF9NSU1FX1RZUEVTLmluY2x1ZGVzKGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSkge1xuICAgICAgICAgIGlmICghZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIGZpbGVOYW1lID0gJ2FwcGl1bS1hcHAuemlwJztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2hvdWxkVW56aXBBcHAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddICYmIC9eYXR0YWNobWVudC9pLnRlc3QoaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddKSkge1xuICAgICAgICBjb25zdCBtYXRjaCA9IC9maWxlbmFtZT1cIihbXlwiXSspL2kuZXhlYyhoZWFkZXJzWydjb250ZW50LWRpc3Bvc2l0aW9uJ10pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoYFBhcnNlZCBmaWxlIG5hbWUgJyR7bWF0Y2hbMV19JyBmcm9tICdDb250ZW50LURpc3Bvc2l0aW9uJyBoZWFkZXJgKTtcbiAgICAgICAgICBmaWxlTmFtZSA9IHNhbml0aXplKG1hdGNoWzFdLCB7XG4gICAgICAgICAgICByZXBsYWNlbWVudDogU0FOSVRJWkVfUkVQTEFDRU1FTlRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzaG91bGRVbnppcEFwcCA9IHNob3VsZFVuemlwQXBwIHx8IFpJUF9FWFRTLmluY2x1ZGVzKHBhdGguZXh0bmFtZShmaWxlTmFtZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZpbGVOYW1lKSB7XG4gICAgICAgIC8vIGFzc2lnbiB0aGUgZGVmYXVsdCBleHRlbnNpb24gaWYgbm9uZSBoYXMgYmVlbiBkZXRlY3RlZFxuICAgICAgICBmaWxlTmFtZSA9IGBhcHBpdW0tYXBwJHtfLmZpcnN0KHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpfWA7XG4gICAgICB9XG4gICAgICBjb25zdCB0YXJnZXRQYXRoID0gYXdhaXQgdGVtcERpci5wYXRoKHtcbiAgICAgICAgcHJlZml4OiBmaWxlTmFtZSxcbiAgICAgICAgc3VmZml4OiAnJyxcbiAgICAgIH0pO1xuICAgICAgbmV3QXBwID0gYXdhaXQgZG93bmxvYWRBcHAobmV3QXBwLCB0YXJnZXRQYXRoKTtcbiAgICB9IGVsc2UgaWYgKGF3YWl0IGZzLmV4aXN0cyhuZXdBcHApKSB7XG4gICAgICAvLyBVc2UgdGhlIGxvY2FsIGFwcFxuICAgICAgbG9nZ2VyLmluZm8oYFVzaW5nIGxvY2FsIGFwcCAnJHtuZXdBcHB9J2ApO1xuICAgICAgc2hvdWxkVW56aXBBcHAgPSBaSVBfRVhUUy5pbmNsdWRlcyhwYXRoLmV4dG5hbWUobmV3QXBwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgVGhlIGFwcGxpY2F0aW9uIGF0ICcke25ld0FwcH0nIGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBhY2Nlc3NpYmxlYDtcbiAgICAgIC8vIHByb3RvY29sIHZhbHVlIGZvciAnQzpcXFxcdGVtcCcgaXMgJ2M6Jywgc28gd2UgY2hlY2sgdGhlIGxlbmd0aCBhcyB3ZWxsXG4gICAgICBpZiAoXy5pc1N0cmluZyhwcm90b2NvbCkgJiYgcHJvdG9jb2wubGVuZ3RoID4gMikge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBgVGhlIHByb3RvY29sICcke3Byb3RvY29sfScgdXNlZCBpbiAnJHtuZXdBcHB9JyBpcyBub3Qgc3VwcG9ydGVkLiBgICtcbiAgICAgICAgICBgT25seSBodHRwOiBhbmQgaHR0cHM6IHByb3RvY29scyBhcmUgc3VwcG9ydGVkYDtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRVbnppcEFwcCkge1xuICAgICAgY29uc3QgYXJjaGl2ZVBhdGggPSBuZXdBcHA7XG4gICAgICBhcmNoaXZlSGFzaCA9IGF3YWl0IGZzLmhhc2goYXJjaGl2ZVBhdGgpO1xuICAgICAgaWYgKEFQUExJQ0FUSU9OU19DQUNIRS5oYXMoYXBwKSAmJiBhcmNoaXZlSGFzaCA9PT0gQVBQTElDQVRJT05TX0NBQ0hFLmdldChhcHApLmhhc2gpIHtcbiAgICAgICAgY29uc3Qge2Z1bGxQYXRofSA9IEFQUExJQ0FUSU9OU19DQUNIRS5nZXQoYXBwKTtcbiAgICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhmdWxsUGF0aCkpIHtcbiAgICAgICAgICBpZiAoYXJjaGl2ZVBhdGggIT09IGFwcCkge1xuICAgICAgICAgICAgYXdhaXQgZnMucmltcmFmKGFyY2hpdmVQYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbG9nZ2VyLmluZm8oYFdpbGwgcmV1c2UgcHJldmlvdXNseSBjYWNoZWQgYXBwbGljYXRpb24gYXQgJyR7ZnVsbFBhdGh9J2ApO1xuICAgICAgICAgIHJldHVybiB2ZXJpZnlBcHBFeHRlbnNpb24oZnVsbFBhdGgsIHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5pbmZvKGBUaGUgYXBwbGljYXRpb24gYXQgJyR7ZnVsbFBhdGh9JyBkb2VzIG5vdCBleGlzdCBhbnltb3JlLiBEZWxldGluZyBpdCBmcm9tIHRoZSBjYWNoZWApO1xuICAgICAgICBBUFBMSUNBVElPTlNfQ0FDSEUuZGVsKGFwcCk7XG4gICAgICB9XG4gICAgICBjb25zdCB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gICAgICB0cnkge1xuICAgICAgICBuZXdBcHAgPSBhd2FpdCB1bnppcEFwcChhcmNoaXZlUGF0aCwgdG1wUm9vdCwgc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobmV3QXBwICE9PSBhcmNoaXZlUGF0aCAmJiBhcmNoaXZlUGF0aCAhPT0gYXBwKSB7XG4gICAgICAgICAgYXdhaXQgZnMucmltcmFmKGFyY2hpdmVQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbG9nZ2VyLmluZm8oYFVuemlwcGVkIGxvY2FsIGFwcCB0byAnJHtuZXdBcHB9J2ApO1xuICAgIH0gZWxzZSBpZiAoIXBhdGguaXNBYnNvbHV0ZShuZXdBcHApKSB7XG4gICAgICBuZXdBcHAgPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgbmV3QXBwKTtcbiAgICAgIGxvZ2dlci53YXJuKGBUaGUgY3VycmVudCBhcHBsaWNhdGlvbiBwYXRoICcke2FwcH0nIGlzIHJlbGF0aXZlLCBgICtcbiAgICAgICAgYHdoaWNoIG1pZ2h0IGNhdXNlIGZ1cnRoZXIgaXNzdWVzLiBUaGUgcGF0aCBoYXMgYmVlbiByZXdyaXR0ZW4gdG8gJyR7bmV3QXBwfScgYCArXG4gICAgICAgIGBpbiBvcmRlciB0byBhdm9pZCB0aGVtYCk7XG4gICAgfVxuXG4gICAgdmVyaWZ5QXBwRXh0ZW5zaW9uKG5ld0FwcCwgc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucyk7XG5cbiAgICBpZiAoYXBwICE9PSBuZXdBcHAgJiYgKGFyY2hpdmVIYXNoIHx8IGN1cnJlbnRNb2RpZmllZCkpIHtcbiAgICAgIEFQUExJQ0FUSU9OU19DQUNIRS5zZXQoYXBwLCB7XG4gICAgICAgIGhhc2g6IGFyY2hpdmVIYXNoLFxuICAgICAgICBsYXN0TW9kaWZpZWQ6IGN1cnJlbnRNb2RpZmllZCxcbiAgICAgICAgZnVsbFBhdGg6IG5ld0FwcCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3QXBwO1xuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRBcHAgKGFwcCwgdGFyZ2V0UGF0aCkge1xuICBsZXQgYXBwVXJsO1xuICB0cnkge1xuICAgIGFwcFVybCA9IHVybC5wYXJzZShhcHApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQXBwIFVSTCAoJHthcHB9KWApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzdGFydGVkID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICAvLyBkb24ndCB1c2UgcmVxdWVzdC1wcm9taXNlIGhlcmUsIHdlIG5lZWQgc3RyZWFtc1xuICAgIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJlcXVlc3QoYXBwVXJsLmhyZWYpXG4gICAgICAgIC5vbignZXJyb3InLCByZWplY3QpIC8vIGhhbmRsZSByZWFsIGVycm9ycywgbGlrZSBjb25uZWN0aW9uIGVycm9yc1xuICAgICAgICAub24oJ3Jlc3BvbnNlJywgKHJlcykgPT4ge1xuICAgICAgICAgIC8vIGhhbmRsZSByZXNwb25zZXMgdGhhdCBmYWlsLCBsaWtlIDQwNHNcbiAgICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGBFcnJvciBkb3dubG9hZGluZyBmaWxlOiAke3Jlcy5zdGF0dXNDb2RlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnBpcGUoX2ZzLmNyZWF0ZVdyaXRlU3RyZWFtKHRhcmdldFBhdGgpKVxuICAgICAgICAub24oJ2Nsb3NlJywgcmVzb2x2ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgW3NlY29uZHMsIG5zXSA9IHByb2Nlc3MuaHJ0aW1lKHN0YXJ0ZWQpO1xuICAgIGNvbnN0IHNlY29uZHNFbGFwc2VkID0gc2Vjb25kcyArIG5zIC8gMUUwOTtcbiAgICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KHRhcmdldFBhdGgpO1xuICAgIGxvZ2dlci5kZWJ1ZyhgJyR7YXBwVXJsLmhyZWZ9JyAoJHt1dGlsLnRvUmVhZGFibGVTaXplU3RyaW5nKHNpemUpfSkgYCArXG4gICAgICBgaGFzIGJlZW4gZG93bmxvYWRlZCB0byAnJHt0YXJnZXRQYXRofScgaW4gJHtzZWNvbmRzRWxhcHNlZC50b0ZpeGVkKDMpfXNgKTtcbiAgICBpZiAoc2Vjb25kc0VsYXBzZWQgPj0gMikge1xuICAgICAgY29uc3QgYnl0ZXNQZXJTZWMgPSBNYXRoLmZsb29yKHNpemUgLyBzZWNvbmRzRWxhcHNlZCk7XG4gICAgICBsb2dnZXIuZGVidWcoYEFwcHJveGltYXRlIGRvd25sb2FkIHNwZWVkOiAke3V0aWwudG9SZWFkYWJsZVNpemVTdHJpbmcoYnl0ZXNQZXJTZWMpfS9zYCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRQYXRoO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFByb2JsZW0gZG93bmxvYWRpbmcgYXBwIGZyb20gdXJsICR7YXBwVXJsLmhyZWZ9OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdhbGtEaXIgKGRpcikge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBuYW1lIG9mIGF3YWl0IGZzLnJlYWRkaXIoZGlyKSkge1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gcGF0aC5qb2luKGRpciwgbmFtZSk7XG4gICAgcmVzdWx0LnB1c2goY3VycmVudFBhdGgpO1xuICAgIGlmICgoYXdhaXQgZnMuc3RhdChjdXJyZW50UGF0aCkpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKC4uLihhd2FpdCB3YWxrRGlyKGN1cnJlbnRQYXRoKSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5hc3luYyBmdW5jdGlvbiB1bnppcEFwcCAoemlwUGF0aCwgZHN0Um9vdCwgc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucykge1xuICBhd2FpdCB6aXAuYXNzZXJ0VmFsaWRaaXAoemlwUGF0aCk7XG5cbiAgaWYgKCFfLmlzQXJyYXkoc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucykpIHtcbiAgICBzdXBwb3J0ZWRBcHBFeHRlbnNpb25zID0gW3N1cHBvcnRlZEFwcEV4dGVuc2lvbnNdO1xuICB9XG5cbiAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICB0cnkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgVW56aXBwaW5nICcke3ppcFBhdGh9J2ApO1xuICAgIGF3YWl0IHppcC5leHRyYWN0QWxsVG8oemlwUGF0aCwgdG1wUm9vdCk7XG4gICAgY29uc3QgYWxsRXh0cmFjdGVkSXRlbXMgPSBhd2FpdCB3YWxrRGlyKHRtcFJvb3QpO1xuICAgIGxvZ2dlci5kZWJ1ZyhgRXh0cmFjdGVkICR7YWxsRXh0cmFjdGVkSXRlbXMubGVuZ3RofSBpdGVtKHMpIGZyb20gJyR7emlwUGF0aH0nYCk7XG4gICAgY29uc3QgaXNTdXBwb3J0ZWRBcHBJdGVtID0gKHJlbGF0aXZlUGF0aCkgPT4gc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucy5pbmNsdWRlcyhwYXRoLmV4dG5hbWUocmVsYXRpdmVQYXRoKSlcbiAgICAgIHx8IF8uc29tZShzdXBwb3J0ZWRBcHBFeHRlbnNpb25zLCAoeCkgPT4gcmVsYXRpdmVQYXRoLmluY2x1ZGVzKGAke3h9JHtwYXRoLnNlcH1gKSk7XG4gICAgY29uc3QgaXRlbXNUb0tlZXAgPSBhbGxFeHRyYWN0ZWRJdGVtc1xuICAgICAgLm1hcCgoaXRlbVBhdGgpID0+IHBhdGgucmVsYXRpdmUodG1wUm9vdCwgaXRlbVBhdGgpKVxuICAgICAgLmZpbHRlcigocmVsYXRpdmVQYXRoKSA9PiBpc1N1cHBvcnRlZEFwcEl0ZW0ocmVsYXRpdmVQYXRoKSlcbiAgICAgIC5tYXAoKHJlbGF0aXZlUGF0aCkgPT4gcGF0aC5yZXNvbHZlKHRtcFJvb3QsIHJlbGF0aXZlUGF0aCkpO1xuICAgIGNvbnN0IGl0ZW1zVG9SZW1vdmUgPSBfLmRpZmZlcmVuY2UoYWxsRXh0cmFjdGVkSXRlbXMsIGl0ZW1zVG9LZWVwKVxuICAgICAgLy8gQXZvaWQgcGFyZW50IGZvbGRlcnMgdG8gYmUgcmVjdXJzaXZlbHkgcmVtb3ZlZFxuICAgICAgLmZpbHRlcigoaXRlbVRvUmVtb3ZlUGF0aCkgPT4gIV8uc29tZShpdGVtc1RvS2VlcCwgKGl0ZW1Ub0tlZXBQYXRoKSA9PiBpdGVtVG9LZWVwUGF0aC5zdGFydHNXaXRoKGl0ZW1Ub1JlbW92ZVBhdGgpKSk7XG4gICAgYXdhaXQgQi5hbGwoaXRlbXNUb1JlbW92ZSwgYXN5bmMgKGl0ZW1QYXRoKSA9PiB7XG4gICAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKGl0ZW1QYXRoKSkge1xuICAgICAgICBhd2FpdCBmcy5yaW1yYWYoaXRlbVBhdGgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGFsbEJ1bmRsZUl0ZW1zID0gKGF3YWl0IHdhbGtEaXIodG1wUm9vdCkpXG4gICAgICAubWFwKChpdGVtUGF0aCkgPT4gcGF0aC5yZWxhdGl2ZSh0bXBSb290LCBpdGVtUGF0aCkpXG4gICAgICAuZmlsdGVyKChyZWxhdGl2ZVBhdGgpID0+IGlzU3VwcG9ydGVkQXBwSXRlbShyZWxhdGl2ZVBhdGgpKVxuICAgICAgLy8gR2V0IHRoZSB0b3AgbGV2ZWwgbWF0Y2hcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnNwbGl0KHBhdGguc2VwKS5sZW5ndGggLSBiLnNwbGl0KHBhdGguc2VwKS5sZW5ndGgpO1xuICAgIGlmIChfLmlzRW1wdHkoYWxsQnVuZGxlSXRlbXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFwcCB6aXAgdW56aXBwZWQgT0ssIGJ1dCB3ZSBjb3VsZCBub3QgZmluZCAke3N1cHBvcnRlZEFwcEV4dGVuc2lvbnN9IGJ1bmRsZShzKSBgICtcbiAgICAgICAgYGluIGl0LiBNYWtlIHN1cmUgeW91ciBhcmNoaXZlIGNvbnRhaW5zICR7c3VwcG9ydGVkQXBwRXh0ZW5zaW9uc30gcGFja2FnZShzKSBgICtcbiAgICAgICAgYGFuZCBub3RoaW5nIGVsc2VgKTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlZEJ1bmRsZSA9IF8uZmlyc3QoYWxsQnVuZGxlSXRlbXMpO1xuICAgIGxvZ2dlci5kZWJ1ZyhgTWF0Y2hlZCAke2FsbEJ1bmRsZUl0ZW1zLmxlbmd0aH0gaXRlbShzKSBpbiB0aGUgZXh0cmFjdGVkIGFyY2hpdmUuIGAgK1xuICAgICAgYEFzc3VtaW5nICcke21hdGNoZWRCdW5kbGV9JyBpcyB0aGUgY29ycmVjdCBidW5kbGVgKTtcbiAgICBhd2FpdCBmcy5tdihwYXRoLnJlc29sdmUodG1wUm9vdCwgbWF0Y2hlZEJ1bmRsZSksIHBhdGgucmVzb2x2ZShkc3RSb290LCBtYXRjaGVkQnVuZGxlKSwge1xuICAgICAgbWtkaXJwOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhdGgucmVzb2x2ZShkc3RSb290LCBtYXRjaGVkQnVuZGxlKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCBmcy5yaW1yYWYodG1wUm9vdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNQYWNrYWdlT3JCdW5kbGUgKGFwcCkge1xuICByZXR1cm4gKC9eKFthLXpBLVowLTlcXC1fXStcXC5bYS16QS1aMC05XFwtX10rKSskLykudGVzdChhcHApO1xufVxuXG5mdW5jdGlvbiBnZXRDb29yZERlZmF1bHQgKHZhbCkge1xuICAvLyBnb2luZyB0aGUgbG9uZyB3YXkgYW5kIGNoZWNraW5nIGZvciB1bmRlZmluZWQgYW5kIG51bGwgc2luY2VcbiAgLy8gd2UgY2FuJ3QgYmUgYXNzdXJlZCBgZWxJZGAgaXMgYSBzdHJpbmcgYW5kIG5vdCBhbiBpbnQuIFNhbWVcbiAgLy8gdGhpbmcgd2l0aCBkZXN0RWxlbWVudCBiZWxvdy5cbiAgcmV0dXJuIHV0aWwuaGFzVmFsdWUodmFsKSA/IHZhbCA6IDAuNTtcbn1cblxuZnVuY3Rpb24gZ2V0U3dpcGVUb3VjaER1cmF0aW9uICh3YWl0R2VzdHVyZSkge1xuICAvLyB0aGUgdG91Y2ggYWN0aW9uIGFwaSB1c2VzIG1zLCB3ZSB3YW50IHNlY29uZHNcbiAgLy8gMC44IGlzIHRoZSBkZWZhdWx0IHRpbWUgZm9yIHRoZSBvcGVyYXRpb25cbiAgbGV0IGR1cmF0aW9uID0gMC44O1xuICBpZiAodHlwZW9mIHdhaXRHZXN0dXJlLm9wdGlvbnMubXMgIT09ICd1bmRlZmluZWQnICYmIHdhaXRHZXN0dXJlLm9wdGlvbnMubXMpIHtcbiAgICBkdXJhdGlvbiA9IHdhaXRHZXN0dXJlLm9wdGlvbnMubXMgLyAxMDAwO1xuICAgIGlmIChkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgLy8gc2V0IHRvIGEgdmVyeSBsb3cgbnVtYmVyLCBzaW5jZSB0aGV5IHdhbnRlZCBpdCBmYXN0XG4gICAgICAvLyBidXQgYmVsb3cgMC4xIGJlY29tZXMgMCBzdGVwcywgd2hpY2ggY2F1c2VzIGVycm9yc1xuICAgICAgZHVyYXRpb24gPSAwLjE7XG4gICAgfVxuICB9XG4gIHJldHVybiBkdXJhdGlvbjtcbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBmaW5kIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGtleSAnaW5LZXknIGFuZCByZW5hbWUgdGhlbSAnb3V0S2V5J1xuICogQHBhcmFtIHsqfSBpbnB1dCBBbnkgdHlwZSBvZiBpbnB1dFxuICogQHBhcmFtIHtTdHJpbmd9IGluS2V5IFRoZSBrZXkgbmFtZSB0byByZXBsYWNlXG4gKiBAcGFyYW0ge1N0cmluZ30gb3V0S2V5IFRoZSBrZXkgbmFtZSB0byByZXBsYWNlIGl0IHdpdGhcbiAqL1xuZnVuY3Rpb24gcmVuYW1lS2V5IChpbnB1dCwgaW5LZXksIG91dEtleSkge1xuICBpZiAoXy5pc0FycmF5KGlucHV0KSkge1xuICAgIHJldHVybiBpbnB1dC5tYXAoKGl0ZW0pID0+IHJlbmFtZUtleShpdGVtLCBpbktleSwgb3V0S2V5KSk7XG4gIH0gZWxzZSBpZiAoXy5pc1BsYWluT2JqZWN0KGlucHV0KSkge1xuICAgIHJldHVybiBfLnJlZHVjZShpbnB1dCwgKHJlc3VsdE9iaiwgdmFsdWUsIGtleSkgPT4gKHtcbiAgICAgIC4uLnJlc3VsdE9iaixcbiAgICAgIFtrZXkgPT09IGluS2V5ID8gb3V0S2V5IDoga2V5XTogcmVuYW1lS2V5KHZhbHVlLCBpbktleSwgb3V0S2V5KSxcbiAgICB9KSwge30pO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0O1xufVxuXG5leHBvcnQge1xuICBjb25maWd1cmVBcHAsIGlzUGFja2FnZU9yQnVuZGxlLCBnZXRDb29yZERlZmF1bHQsIGdldFN3aXBlVG91Y2hEdXJhdGlvbiwgcmVuYW1lS2V5LFxufTtcbiJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
